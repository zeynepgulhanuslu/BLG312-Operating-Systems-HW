//// Created by Zeynep GÃ¼lhan Uslu//#ifndef HW2_CUSTOMER_H#define HW2_CUSTOMER_H#include <sys/mman.h>#include <string.h>#define MAX_PRODUCT_BUY 5#define MIN_PRODUCTS 5#define MIN_CUSTOMERS 3#define MAX_ITEM_QUANTITY 10#define MAX_PRICE 200#define MAX_BALANCE 200// Define data structures for customers, products, and ordersstruct Product {    int product_ID;    double product_Price;    int product_Quantity;};// for creating orders linked liststruct Order {    int product_ID;    int quantity;    struct Order *next;};// for creating purchase linked list.struct Purchase {    int product_ID;    int quantity;    double price;    struct Purchase *next;};struct Customer {    int customer_ID;    double initial_balance;    double customer_Balance;    struct Order *ordered_Items;    struct Purchase *purchased_Items;    int purchased_count;};/** * Thread arguments for purchase_multiple_randomly_thread function. */typedef struct {    struct Customer *customers;    struct Product *products;    pthread_mutex_t *lock;    int customer_index;    int num_products;} purchase_multiple_randomly_thread_args_t;// Allocate memory for a new Customer struct with dynamically allocated arraysstruct Customer *create_customer(int id, int num_products) {    struct Customer *customer = malloc(sizeof(struct Customer));    customer->customer_ID = id;    customer->initial_balance = ((double) rand() / RAND_MAX) * (MAX_BALANCE - 0) + 0;;    customer->customer_Balance = customer->initial_balance;    customer->ordered_Items = malloc(num_products * sizeof(struct Order));    memset(customer->ordered_Items, 0, num_products * sizeof(struct Order));    customer->purchased_Items = malloc(num_products * sizeof(struct Purchase));    memset(customer->purchased_Items, 0, num_products * sizeof(struct Product));    customer->purchased_count = 0;    return customer;}// Initialize arrays of customers.void initialize_customers(struct Customer *customers, int num_customers, int num_products) {    // Initialize each customer with a unique ID and a random balance    for (int i = 0; i < num_customers; i++) {        int id = i + 1;        struct Customer *customer = create_customer(id, num_products);        customers[i] = *customer;        free(customer);    }}// print customer informationvoid print_customer_information(struct Customer *c) {    // Print customer information    printf("Customer ID: %d\n", c->customer_ID);    printf("Customer Initial Balance: $%.2f\n", c->initial_balance);    printf("Customer updated balance: $%.2f\n", c->customer_Balance);    printf("Ordered items:\n");    // Print ordered items    struct Order *o = c->ordered_Items;    while (o != NULL) {        if (o->product_ID != 0) {            printf("Ordered ID: %d, Quantity: %d\n", o->product_ID, o->quantity);        }        o = o->next;    }    printf("\nPurchased Items:\n");    if (c->purchased_count == 0) {        printf("None\n");    } else {        struct Purchase *p = c->purchased_Items;        while (p != NULL) {            if (p->product_ID != 0) {                printf("%-8d %-8d %-8.2f\n", p->product_ID, p->quantity, p->price);            }            p = p->next;        }    }}void print_customers_information(struct Customer *customers, int num_customers) {    for (int i = 0; i < num_customers; i++) {        struct Customer *c = &customers[i];        // Print customer information        print_customer_information(c);    }}void print_products_information(struct Product *products, int num_product) {    printf("Product ID Quantity Price\n");    for (int i = 0; i < num_product; i++) {        printf("%-8d %-8d %-8.2f\n", products[i].product_ID,               products[i].product_Quantity, products[i].product_Price);    }}// free memory for ordered_Items and purchased_Itemsvoid destroy_customer(struct Customer *customer) {    free(customer->ordered_Items);    free(customer->purchased_Items);}void free_customers(struct Customer *customers, int num_customers) {    for (int i = 0; i < num_customers; i++) {        destroy_customer(&customers[i]);    }}// Define the function to initialize an array of productsvoid initialize_products(struct Product *products, int num_products) {    // Initialize each product with a unique ID, a random quantity, and a random price    for (int i = 0; i < num_products; i++) {        products[i].product_ID = i + 1;        products[i].product_Quantity = (rand() % MAX_ITEM_QUANTITY) + 1;        products[i].product_Price = ((double) rand() / RAND_MAX) * (MAX_PRICE - 1) + 1;    }}#ifndef MAP_ANONYMOUS#define MAP_ANONYMOUS MAP_ANON#endif#endif //HW2_CUSTOMER_H